		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude 2.7 built: Mar  3 2014 18:04:05
	    Copyright 1997-2014 SRI International
		   Wed Jul  8 14:31:27 2015

	    Full Maude 2.6.1e July 13th 2012

     --- A Constructor-based Theorem Prover(2013.10.30)! ---
Command lists:
	load *.maude .			-- load modules into database

	(goal ModuleName |- Equations/Rules/Memberships)
	(set ind on Vars .)		-- specify the variables for induction
	(init LEMMA by V <- c .)	-- initialize a lemma by substitution.
	(auto goal GoalID .)		-- prove a subgoal
	(auto .)			-- try to prove the current goal
	(roll back .)			-- go back to the previous goal
	(apply RuleName .)		-- apply a given rule to default goal
	(apply RuleName to GoalId .)	-- apply a rule to a goal
	(cp EQ >< EQ)			-- check critical pairs
	(cp Label >< Label .)		-- check critical pairs
	(rule .)			-- add a critical pair as a rule
	(backward rule .)		-- rule in inverse direction
	(equation .)			-- add a critical pair as an equation
	(backward equation .)		-- equation in inverse direction
	(show unproved goals .)		-- show all unproved goals
	(show goal GoalID .)		-- show a goal and set it as default
	(show goal .)			-- show the current goal
	(show tactics .)		-- show all tactics
	(set tactic PROOF STRATEGY .)	-- specify customized proof strategy
	(select tactic NAT .)		-- to use customized proof strategy
	(set module off .)		-- only show added contents in module
	(set module on .)		-- display all content in modules
	(lred <Term> .)			-- reduce term in current goal
	(help me .)			-- show all commands
Introduced module PUT-0

============================ GOAL 1-1 ============================
< Module PUT-0 is concealed
  ...
  ...


  End of the module,

  ceq putAs(consT(var2:Tag,ss1:TagList),RputAs(consT(var2:Tag,ss1:TagList))) =
    consT(var2:Tag,ss1:TagList)
    if putAs(ss1:TagList,RputAs(ss1:TagList))= ss1:TagList  --> to be proved!
>
unproved

INFO: an initial goal generated!
INFO: Induction will be conducted on var2:Tag
INFO: goal 1-1 is proved
INFO: PROOF COMPLETED!
Introduced module PUT-1

============================ GOAL 1-1 ============================
< Module PUT-1 is concealed
  ...
  ...


  End of the module,

  eq putAs(S:TagList,RputAs(S:TagList)) = S:TagList  --> to be proved!
>
unproved

INFO: an initial goal generated!
INFO: Induction will be conducted on S:TagList
INFO: goal 1-1 is proved
INFO: PROOF COMPLETED!
Introduced module PUT-2

============================ GOAL 1-1 ============================
< Module PUT-2 is concealed
  ...
  ...


  End of the module,

  eq pr(S:TagList,S:TagList) = S:TagList  --> to be proved!
>
unproved

INFO: an initial goal generated!
INFO: goal 1-1 is proved
INFO: PROOF COMPLETED!
Maude> Bye.
