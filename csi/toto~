NO
<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="cpfHTML.xsl"?><certificationProblem xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cpf.xsd"><input><trsInput><trs><rules><rule><lhs><funapp><name>Rput</name><arg><funapp><name>Cons</name><arg><var>ss1</var></arg><arg><var>ss2</var></arg></funapp></arg></funapp></lhs><rhs><funapp><name>Cons</name><arg><funapp><name>RmatchSec</name><arg><var>ss1</var></arg></funapp></arg><arg><funapp><name>Rput</name><arg><var>ss2</var></arg></funapp></arg></funapp></rhs></rule><rule><lhs><funapp><name>Rput</name><arg><funapp><name>empty</name></funapp></arg></funapp></lhs><rhs><funapp><name>empty</name></funapp></rhs></rule><rule><lhs><funapp><name>RunmatchSec</name><arg><var>ss</var></arg></funapp></lhs><rhs><funapp><name>RmatchSec</name><arg><var>ss</var></arg></funapp></rhs></rule><rule><lhs><funapp><name>RunmatchSec</name><arg><funapp><name>SecS</name><arg><var>t</var></arg><arg><funapp><name>newSec</name></funapp></arg><arg><var>ss</var></arg></funapp></arg></funapp></lhs><rhs><funapp><name>SecV</name><arg><var>t</var></arg><arg><funapp><name>RallNewSub</name><arg><var>ss</var></arg></funapp></arg></funapp></rhs></rule><rule><lhs><funapp><name>RmatchSec</name><arg><funapp><name>SecS</name><arg><var>t</var></arg><arg><var>p</var></arg><arg><var>ss</var></arg></funapp></arg></funapp></lhs><rhs><funapp><name>SecV</name><arg><var>t</var></arg><arg><funapp><name>RputSub</name><arg><var>ss</var></arg></funapp></arg></funapp></rhs></rule><rule><lhs><funapp><name>RallNewSub</name><arg><funapp><name>Cons</name><arg><var>ss1</var></arg><arg><var>ss2</var></arg></funapp></arg></funapp></lhs><rhs><funapp><name>Cons</name><arg><funapp><name>RunmatchSub</name><arg><var>ss1</var></arg></funapp></arg><arg><funapp><name>RallNewSub</name><arg><var>ss2</var></arg></funapp></arg></funapp></rhs></rule><rule><lhs><funapp><name>RallNewSub</name><arg><funapp><name>empty</name></funapp></arg></funapp></lhs><rhs><funapp><name>empty</name></funapp></rhs></rule><rule><lhs><funapp><name>RputSub</name><arg><funapp><name>Cons</name><arg><var>ss1</var></arg><arg><var>ss2</var></arg></funapp></arg></funapp></lhs><rhs><funapp><name>Cons</name><arg><funapp><name>RmatchSub</name><arg><var>ss1</var></arg></funapp></arg><arg><funapp><name>RputSub</name><arg><var>ss2</var></arg></funapp></arg></funapp></rhs></rule><rule><lhs><funapp><name>RputSub</name><arg><funapp><name>empty</name></funapp></arg></funapp></lhs><rhs><funapp><name>empty</name></funapp></rhs></rule><rule><lhs><funapp><name>RmatchSub</name><arg><var>ss</var></arg></funapp></lhs><rhs><funapp><name>Rmatch</name><arg><var>ss</var></arg></funapp></rhs></rule><rule><lhs><funapp><name>RmatchSub</name><arg><funapp><name>SubS</name><arg><var>t</var></arg><arg><funapp><name>newSub</name></funapp></arg></funapp></arg></funapp></lhs><rhs><var>t</var></rhs></rule><rule><lhs><funapp><name>Rmatch</name><arg><funapp><name>SubS</name><arg><var>t</var></arg><arg><var>p</var></arg></funapp></arg></funapp></lhs><rhs><var>t</var></rhs></rule></rules></trs></trsInput></input><cpfVersion>2.1</cpfVersion><proof><crDisproof><nonJoinableFork><rewriteSequence><startTerm><funapp><name>RunmatchSec</name><arg><funapp><name>SecS</name><arg><var>t</var></arg><arg><funapp><name>newSec</name></funapp></arg><arg><var>ss</var></arg></funapp></arg></funapp></startTerm><rewriteStep><positionInTerm/><rule><lhs><funapp><name>RunmatchSec</name><arg><var>ss</var></arg></funapp></lhs><rhs><funapp><name>RmatchSec</name><arg><var>ss</var></arg></funapp></rhs></rule><funapp><name>RmatchSec</name><arg><funapp><name>SecS</name><arg><var>t</var></arg><arg><funapp><name>newSec</name></funapp></arg><arg><var>ss</var></arg></funapp></arg></funapp></rewriteStep><rewriteStep><positionInTerm/><rule><lhs><funapp><name>RmatchSec</name><arg><funapp><name>SecS</name><arg><var>t</var></arg><arg><var>p</var></arg><arg><var>ss</var></arg></funapp></arg></funapp></lhs><rhs><funapp><name>SecV</name><arg><var>t</var></arg><arg><funapp><name>RputSub</name><arg><var>ss</var></arg></funapp></arg></funapp></rhs></rule><funapp><name>SecV</name><arg><var>t</var></arg><arg><funapp><name>RputSub</name><arg><var>ss</var></arg></funapp></arg></funapp></rewriteStep></rewriteSequence><rewriteSequence><startTerm><funapp><name>RunmatchSec</name><arg><funapp><name>SecS</name><arg><var>t</var></arg><arg><funapp><name>newSec</name></funapp></arg><arg><var>ss</var></arg></funapp></arg></funapp></startTerm><rewriteStep><positionInTerm/><rule><lhs><funapp><name>RunmatchSec</name><arg><funapp><name>SecS</name><arg><var>t</var></arg><arg><funapp><name>newSec</name></funapp></arg><arg><var>ss</var></arg></funapp></arg></funapp></lhs><rhs><funapp><name>SecV</name><arg><var>t</var></arg><arg><funapp><name>RallNewSub</name><arg><var>ss</var></arg></funapp></arg></funapp></rhs></rule><funapp><name>SecV</name><arg><var>t</var></arg><arg><funapp><name>RallNewSub</name><arg><var>ss</var></arg></funapp></arg></funapp></rewriteStep></rewriteSequence><capNotUnif/></nonJoinableFork></crDisproof></proof><origin><proofOrigin><tool><name>ttt2</name><version>csi 0.5</version><strategy>(if trs then ( sorted -order*;((if ground then uncurry -curry?; groundcr else fail) || (cr -kb;((( matrix -dim 1 -ib 3 -ob 5 | matrix -dim 2 -ib 2 -ob 3 | matrix -dim 3 -ib 1 -ob 2 | matrix -dim 3 -ib 1 -ob 1 | fail)[1]*);((dp;edg[0.5]?;(sccs | (sc || sct || {ur?;( (matrix -dp -ur -dim 1 -ib 3 -ob 5 | matrix -dp -ur -dim 2 -ib 2 -ob 3 | matrix -dp -ur -dim 3 -ib 1 -ob 3) || (kbo -ur -af | lpo -ur -af) || ( arctic -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || ( arctic -bz -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || fail) }restore || fail;(bounds -dp -rfc -qc || bounds -dp -all -rfc -qc || bounds -rfc -qc)[1] || fail ))*[6])! || (( kbo || (lpo | fail;(ref;lpo)) || fail;(bounds -rfc -qc) || fail)*[7])!)))! || ( (nonconfluence -steps 2 -tcap -fun | nonconfluence -steps 25 -width 1 -tcap -fun | nonconfluence -steps 2 -idem -fun) || (nonconfluence -steps 2 -tcap -var | nonconfluence -steps 25 -width 1 -tcap -var) || (nonconfluence -steps 0 -tree -fun | nonconfluence -steps 0 -tree -var | nonconfluence -steps 1 -tree -fun | nonconfluence -steps 1 -tree -var | nonconfluence -steps 2 -tree -fun | nonconfluence -steps 2 -tree -var | nonconfluence -steps 25 -width 1 -tree -fun | nonconfluence -steps 25 -width 1 -tree -var) )[6] || (((((if linear then cr -closed -redundant;(closed -feeble | closed -strongly 7) else (if left-linear then (cr -closed -redundant;(closed -feeble | closed -parallel)) else fail))! || (if left-linear then (((cr  -dup;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -lstar);((shift -dd;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(decreasing | (rule_labeling | rule_labeling -left)?;decreasing))!)! || ((cr  -star;(( matrix -dim 1 -ib 2 -ob 2 -strict_empty -lstar | matrix -dim 2 -ib 2 -ob 2 -strict_empty -lstar)[2])*;shift -sstar);((shift -dd;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(decreasing | (rule_labeling | rule_labeling -left)?;decreasing))!)! || ((cr  -redex;(( matrix -dim 1 -ib 2 -ob 2 -strict_empty -lredex )[2])*;shift -lstar);(shift -dd;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(decreasing | rule_labeling?;decreasing))! || (cr -force;((shift -dd -force;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(rule_labeling | rule_labeling -left)?;((rule_labeling -left -persist;decreasing)|((shift -par;decreasing -par)|(shift -par -m 2;decreasing -par))))!)!) else fail)!) | add)2*)! || (cr -rt;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);kh -mace;(sorted -order | ((cr -kb;((( matrix -dim 1 -ib 3 -ob 5 | matrix -dim 2 -ib 2 -ob 3 | matrix -dim 3 -ib 1 -ob 2 | matrix -dim 3 -ib 1 -ob 1 | fail)[1]*);((dp;edg[0.5]?;(sccs | (sc || sct || {ur?;( (matrix -dp -ur -dim 1 -ib 3 -ob 5 | matrix -dp -ur -dim 2 -ib 2 -ob 3 | matrix -dp -ur -dim 3 -ib 1 -ob 3) || (kbo -ur -af | lpo -ur -af) || ( arctic -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || ( arctic -bz -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || fail) }restore || fail;(bounds -dp -rfc -qc || bounds -dp -all -rfc -qc || bounds -rfc -qc)[1] || fail ))*[6])! || (( kbo || (lpo | fail;(ref;lpo)) || fail;(bounds -rfc -qc) || fail)*[7])!)))! || (((((if linear then cr -closed -redundant;(closed -feeble | closed -strongly 7) else (if left-linear then (cr -closed -redundant;(closed -feeble | closed -parallel)) else fail))! || (if left-linear then (((cr  -dup;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -lstar);((shift -dd;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(decreasing | (rule_labeling | rule_labeling -left)?;decreasing))!)! || ((cr  -star;(( matrix -dim 1 -ib 2 -ob 2 -strict_empty -lstar | matrix -dim 2 -ib 2 -ob 2 -strict_empty -lstar)[2])*;shift -sstar);((shift -dd;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(decreasing | (rule_labeling | rule_labeling -left)?;decreasing))!)! || ((cr  -redex;(( matrix -dim 1 -ib 2 -ob 2 -strict_empty -lredex )[2])*;shift -lstar);(shift -dd;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(decreasing | rule_labeling?;decreasing))! || (cr -force;((shift -dd -force;(( lpo -quasi || (matrix -dim 1 -ib 3 -ob 4 | matrix -dim 2 -ib 2 -ob 2 | matrix -dim 3 -ib 1 -ob 2 | arctic -dim 2 -ib 2 -ob 2) || (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || poly -ib 2 -ob 4 -nl2 -heuristic 1 || fail )[5]*);shift -ldh -force);(rule_labeling | rule_labeling -left)?;((rule_labeling -left -persist;decreasing)|((shift -par;decreasing -par)|(shift -par -m 2;decreasing -par))))!)!) else fail)!) | add)2*)!)))*)! || ((at -theorem 2; ((( matrix -dim 1 -ib 3 -ob 5 | matrix -dim 2 -ib 2 -ob 3 | matrix -dim 3 -ib 1 -ob 2 | matrix -dim 3 -ib 1 -ob 1 | fail)[1]*);((dp;edg[0.5]?;(sccs | (sc || sct || {ur?;( (matrix -dp -ur -dim 1 -ib 3 -ob 5 | matrix -dp -ur -dim 2 -ib 2 -ob 3 | matrix -dp -ur -dim 3 -ib 1 -ob 3) || (kbo -ur -af | lpo -ur -af) || ( arctic -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || ( arctic -bz -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || fail) }restore || fail;(bounds -dp -rfc -qc || bounds -dp -all -rfc -qc || bounds -rfc -qc)[1] || fail ))*[6])! || (( kbo || (lpo | fail;(ref;lpo)) || fail;(bounds -rfc -qc) || fail)*[7])!)))! || (at -theorem 3; ((( matrix -dim 1 -ib 3 -ob 5 | matrix -dim 2 -ib 2 -ob 3 | matrix -dim 3 -ib 1 -ob 2 | matrix -dim 3 -ib 1 -ob 1 | fail)[1]*);((dp;edg[0.5]?;(sccs | (sc || sct || {ur?;( (matrix -dp -ur -dim 1 -ib 3 -ob 5 | matrix -dp -ur -dim 2 -ib 2 -ob 3 | matrix -dp -ur -dim 3 -ib 1 -ob 3) || (kbo -ur -af | lpo -ur -af) || ( arctic -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || ( arctic -bz -dp -ur -dim 2 -ib 2 -ob 2[2] | fail) || fail) }restore || fail;(bounds -dp -rfc -qc || bounds -dp -all -rfc -qc || bounds -rfc -qc)[1] || fail ))*[6])! || (( kbo || (lpo | fail;(ref;lpo)) || fail;(bounds -rfc -qc) || fail)*[7])!)))!))) ) else fail)</strategy></tool></proofOrigin></origin></certificationProblem>
