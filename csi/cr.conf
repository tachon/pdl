#designed for the 2010 competition
 
# hack to get differences between full/certified strategy
# abbreviation is set using "-cpf" flag when calling ttt2
#FULL=      #use for full version
#FULL=fail; #use for certified version

PRETRS = ((\
 matrix -dim 1 -ib 3 -ob 5 | \
 matrix -dim 2 -ib 2 -ob 3 | \
 matrix -dim 3 -ib 1 -ob 2 | \
 matrix -dim 3 -ib 1 -ob 1 | \
 fail)[1]*)
DIRECTTRS = ((\
 kbo || \
 (lpo | FULL(ref;lpo)) || \
 FULL(bounds -rfc -qc) || \
 fail)*[7])!
ARCTICTRS = \
( arctic -dp -ur -dim 2 -ib 2 -ob 2[2] | \
 fail)
ARCTICBZTRS = \
( arctic -bz -dp -ur -dim 2 -ib 2 -ob 2[2] | \
 fail)
BOUNDS = FULL(bounds -dp -rfc -qc || bounds -dp -all -rfc -qc || bounds -rfc -qc)
MAINTRS = (dp;edg[0.5]?;(sccs | \
 (sc || sct || \
 {ur?;( \
  (matrix -dp -ur -dim 1 -ib 3 -ob 5 | \
   matrix -dp -ur -dim 2 -ib 2 -ob 3 | \
   matrix -dp -ur -dim 3 -ib 1 -ob 3) || \
  (kbo -ur -af | lpo -ur -af) || \
  ARCTICTRS || \
  ARCTICBZTRS || \
  fail) \
 }restore || \
 BOUNDS[1] || \
 fail \
 ))*[6])!
TOTALTRS=(PRETRS;(MAINTRS || DIRECTTRS || unfold))
SN=(PRETRS;(MAINTRS || DIRECTTRS))

#relative
SNRELATIVE_STEP = ( \
 lpo -quasi || \
 (matrix -dim 1 -ib 3 -ob 4 | \
  matrix -dim 2 -ib 2 -ob 2 | \
  matrix -dim 3 -ib 1 -ob 2 | \
  arctic -dim 2 -ib 2 -ob 2) || \
 (if duplicating then fail else (bounds -rt || bounds -rt -qc))[1] || \
 poly -ib 2 -ob 4 -nl2 -heuristic 1 || \
 fail \
 )
SNRELATIVE = (SNRELATIVE_STEP[5]*)

MATRIXSTAR=(( \
 matrix -dim 1 -ib 2 -ob 2 -strict_empty -lstar | \
 matrix -dim 2 -ib 2 -ob 2 -strict_empty -lstar)[2])
#simple oderings only for the redex labeling!
MATRIXREDEX=(( \
 matrix -dim 1 -ib 2 -ob 2 -strict_empty -lredex\
 )[2])
M=
#M=-m 1
#useful abbreviations
LDH = (shift -dd;SNRELATIVE;shift -ldh -force)
LDH2 = (shift -cds -cdsr 1;(SNRELATIVE_STEP || shift -ldh -force;decreasing)[10]*;shift -ldh -force)
LDHF = (shift -dd -force;SNRELATIVE;shift -ldh -force)
STAR = (cr M -star;MATRIXSTAR*;shift -lstar)
SSTAR = (cr M -star;MATRIXSTAR*;shift -sstar)
#SSSTAR = (cr M -star;SNRELATIVE;shift -lstar)
DUP = (cr M -dup;SNRELATIVE;shift -lstar) #that not implicit ldh is used
REDEX = (cr M -redex;MATRIXREDEX*;shift -lstar) #that not implicit ldh is used
GROUND = (if ground then uncurry -curry?; groundcr else fail)

#cade system description
NOTCR = ( \
 (nonconfluence -steps 2 -tcap -fun | \
  nonconfluence -steps 25 -width 1 -tcap -fun | \
  nonconfluence -steps 2 -idem -fun) || \
 (nonconfluence -steps 2 -tcap -var | \
  nonconfluence -steps 25 -width 1 -tcap -var) || \
 (nonconfluence -steps 0 -tree -fun | \
  nonconfluence -steps 0 -tree -var | \
  nonconfluence -steps 1 -tree -fun | \
  nonconfluence -steps 1 -tree -var | \
  nonconfluence -steps 2 -tree -fun | \
  nonconfluence -steps 2 -tree -var | \
  nonconfluence -steps 25 -width 1 -tree -fun | \
  nonconfluence -steps 25 -width 1 -tree -var) \
)[6]
KB = (cr -kb;SN)!
RL = (rule_labeling | rule_labeling -left)
DECPAR = ((shift -par;decreasing -par)|(shift -par -m 2;decreasing -par))
DECWLL = ((rule_labeling -left -persist;decreasing)|DECPAR)
#DDPRE = (DUP || SSTAR || REDEX)
DDLAB = (LDH;(decreasing | RL?;decreasing))!
COR1 = (DUP;DDLAB)!
COR2 = (SSTAR;DDLAB)!
COR3 = (REDEX;LDH;(decreasing | rule_labeling?;decreasing))!
#criteria based on weak LL-labelings
DDWLL = (LDHF;RL?;DECWLL)!
DD = (if left-linear then (COR1 || COR2 || COR3 || (cr -force;DDWLL)!) else fail)!
OS = sorted -order
CLOSED = (if linear then cr -closed -redundant;(closed -feeble | closed -strongly 7) else \
         (if left-linear then (cr -closed -redundant;(closed -feeble | closed -parallel)) else fail))!
#AUTO_old = (KB || NOTCR || DD || CLOSED || OS)*
# test
CR_AUX = (sorted -order | (KB || ((((CLOSED || DD) | add)2*)!)))*
KH = (cr -rt;SNRELATIVE;kh -mace;CR_AUX)!
AT1 = (at -theorem 1; SN)!
AT2 = (at -theorem 2; SN)!
AT3 = (at -theorem 3; SN)!
AT = (AT2 || AT3)
#KH = (cr -rt;SNRELATIVE;kh;CR_AUX)!
#AUTO_old = (GROUND || KB || NOTCR || ((((CLOSED || DD) | add)2*)!) || sorted -order)*
AUTO = (if trs then (\
 sorted -order*;(GROUND || KB || NOTCR || ((((CLOSED || DD) | add)2*)! || KH || AT)) \
 ) else fail)

# redundant rule removal
REDUNDANT_JS = ((cr -force -redundant);(redundant))
REDUNDANT_RHS = ((cr -force -redundant);(redundant -rhs))
REDUNDANT_DEL = ((cr -force);(redundant -remove 4))

# full strategies
AUTO_ALL = (if trs then (\
 sorted -order*;(GROUND || KB || \
 (NOTCR | REDUNDANT_JS)3*! || \
 (REDUNDANT_DEL?;(CLOSED || DD))3*! || \
 (((CLOSED || DD) | REDUNDANT_RHS)3*! || \
 (CLOSED || DD) | REDUNDANT_JS)3*! || KH || AT) \
 ) else fail)

CERT_ALL = (KB || \
  (NOTCR_CERT | REDUNDANT_JS)3*! || \
  (REDUNDANT_DEL?;(CLOSED_CERT || RL_CERT))! || \
  ((CLOSED_CERT || RL_CERT) | REDUNDANT_JS)3*! || \
  ((CLOSED_CERT || RL_CERT) | REDUNDANT_RHS)3*!)

# strategy: joining sequences of critical pairs
AUTO_JS = (if trs then ( sorted -order*;\
 (GROUND || KB || ((CLOSED || DD || NOTCR) | REDUNDANT_JS | add)*! || KH || AT) \
 ) else fail)
CERT_JS = (KB || (((CLOSED_CERT || RL_CERT || NOTCR_CERT) | REDUNDANT_JS)*)!)

# strategy: rewriting right-hand sides
AUTO_RHS = (if trs then ( sorted -order*;\
 (GROUND || KB || ((CLOSED || DD || NOTCR) | REDUNDANT_RHS | add)*! || KH || AT) \
 ) else fail)
CERT_RHS = (KB || (((CLOSED_CERT || RL_CERT || NOTCR_CERT) | REDUNDANT_RHS)*)!)

# strategy: delete rules with joinable lhs and rhs
AUTO_DEL = (if trs then (\
 sorted -order*;(GROUND || KB || NOTCR || (((REDUNDANT_DEL?;(CLOSED || DD) | add)*)! || KH || AT)) \
 ) else fail)
CERT_DEL = (KB || NOTCR_CERT || (REDUNDANT_DEL?;(CLOSED_CERT || RL_CERT)))

#for testing only
CORP=cr -force;LDHF;RL?;rule_labeling -left -persist;decreasing

# certified criteria
NOTCR_CERT = ( \
 (nonconfluence -steps 2 -tcap -fun | \
  nonconfluence -steps 25 -width 1 -tcap -fun) || \
 (nonconfluence -steps 2 -tcap -var | \
  nonconfluence -steps 25 -width 1 -tcap -var) || \
 (nonconfluence -steps 0 -tree -cert -fun | \
  nonconfluence -steps 0 -tree -cert -var | \
  nonconfluence -steps 1 -tree -cert -fun | \
  nonconfluence -steps 1 -tree -cert -var | \
  nonconfluence -steps 2 -tree -cert -fun | \
  nonconfluence -steps 2 -tree -cert -var | \
  nonconfluence -steps 25 -tree -cert -fun | \
  nonconfluence -steps 25 -tree -cert -var) \
)[6]

# rule labeling
RL_CERT = (if linear then DUP;RL?;decreasing else fail)!
# rule labeling with terminating Rd/Rnd
RL_CERT_LL = (if left-linear then DUP;RL?;decreasing else fail)!
CLOSED_CERT = (if linear then cr -closed;closed -strongly 7 else \
              (if left-linear then cr -closed;closed -trivial else fail))!
#CoCo 2013
CERTA = (KB || CLOSED_CERT || NOTCR_CERT)
#CoCo 2014
CERTB = (CERTA || RL_CERT)
#CoCo 2015
CERTC = (CERTB || RL_CERT_LL)
